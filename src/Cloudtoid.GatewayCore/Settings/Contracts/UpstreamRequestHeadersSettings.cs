namespace Cloudtoid.GatewayCore.Settings
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Cloudtoid.GatewayCore.Headers;
    using Microsoft.Net.Http.Headers;

    public sealed class UpstreamRequestHeadersSettings
    {
        private static readonly ISet<string> DoNotTransferBaseHeaders =
            new[]
            {
                HeaderNames.Host,
                HeaderNames.Via,
                Names.ExternalAddress,
                Names.ProxyName,
                Names.CallId,
                Names.Forwarded,
                Names.XForwardedFor,
                Names.XForwardedHost,
                Names.XForwardedProto
            }
            .Concat(HeaderTypes.StandardHopByHopeHeaders)
            .Concat(HeaderTypes.ContentHeaders)
            .ToHashSet(StringComparer.OrdinalIgnoreCase);

        internal UpstreamRequestHeadersSettings(
            bool discardEmpty,
            bool discardUnderscore,
            bool addExternalAddress,
            bool addProxyName,
            bool discardInboundHeaders,
            bool skipVia,
            bool skipCorrelationId,
            bool skipCallId,
            bool skipForwarded,
            bool useXForwarded,
            IReadOnlyDictionary<string, HeaderOverride> overrides,
            ISet<string> discards)
        {
            DiscardEmpty = discardEmpty;
            DiscardUnderscore = discardUnderscore;
            AddExternalAddress = addExternalAddress;
            AddProxyName = addProxyName;
            DiscardInboundHeaders = discardInboundHeaders;
            SkipVia = skipVia;
            SkipCorrelationId = skipCorrelationId;
            SkipCallId = skipCallId;
            SkipForwarded = skipForwarded;
            UseXForwarded = useXForwarded;
            Overrides = overrides;
            Discards = discards;

            DoNotTransferHeaders = DoNotTransferBaseHeaders
                .Concat(overrides.Keys)
                .Concat(discards)
                .ToHashSet(StringComparer.OrdinalIgnoreCase);
        }

        public bool DiscardEmpty { get; }

        public bool DiscardUnderscore { get; }

        public bool AddExternalAddress { get; }

        public bool AddProxyName { get; }

        public bool DiscardInboundHeaders { get; }

        public bool SkipVia { get; }

        public bool SkipCorrelationId { get; }

        public bool SkipCallId { get; }

        public bool SkipForwarded { get; }

        public bool UseXForwarded { get; }

        public IReadOnlyDictionary<string, HeaderOverride> Overrides { get; }

        public ISet<string> Discards { get; }

        /// <summary>
        /// This is a list of headers that should not be passed on to the upstream system as they are.
        /// They can be transferred, but only when they are transformed. This set consists of
        /// <list type="bullet">
        /// <item>Headers generated by an instance of this proxy</item>
        /// <item>Standard hop-by-hop headers. See <see cref="HeaderTypes.StandardHopByHopeHeaders"/> for more information.</item>
        /// <item>Content headers. See <see cref="HeaderTypes.ContentHeaders"/> for more information.</item>
        /// <item><see cref="Overrides"/> headers.</item>
        /// <item><see cref="Discards"/> headers.</item>
        /// </list>
        /// </summary>
        public ISet<string> DoNotTransferHeaders { get; }
    }
}